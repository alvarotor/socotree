// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ServicesEmailsClient is the client API for ServicesEmails service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServicesEmailsClient interface {
	EmailForgottenPassword(ctx context.Context, in *Email, opts ...grpc.CallOption) (*Response, error)
	EmailInterestsAdmin(ctx context.Context, in *EmailInterest, opts ...grpc.CallOption) (*Response, error)
	EmailVerifyUserEmail(ctx context.Context, in *Email, opts ...grpc.CallOption) (*Response, error)
	EmailUserNewCircle(ctx context.Context, in *Email, opts ...grpc.CallOption) (*Response, error)
	EmailUserVerified(ctx context.Context, in *Email, opts ...grpc.CallOption) (*Response, error)
	EmailReportProfile(ctx context.Context, in *MessageReportProfile, opts ...grpc.CallOption) (*Response, error)
	EmailAdmin(ctx context.Context, in *EmailAdminRequest, opts ...grpc.CallOption) (*Response, error)
}

type servicesEmailsClient struct {
	cc grpc.ClientConnInterface
}

func NewServicesEmailsClient(cc grpc.ClientConnInterface) ServicesEmailsClient {
	return &servicesEmailsClient{cc}
}

func (c *servicesEmailsClient) EmailForgottenPassword(ctx context.Context, in *Email, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/grpc.ServicesEmails/EmailForgottenPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesEmailsClient) EmailInterestsAdmin(ctx context.Context, in *EmailInterest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/grpc.ServicesEmails/EmailInterestsAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesEmailsClient) EmailVerifyUserEmail(ctx context.Context, in *Email, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/grpc.ServicesEmails/EmailVerifyUserEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesEmailsClient) EmailUserNewCircle(ctx context.Context, in *Email, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/grpc.ServicesEmails/EmailUserNewCircle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesEmailsClient) EmailUserVerified(ctx context.Context, in *Email, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/grpc.ServicesEmails/EmailUserVerified", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesEmailsClient) EmailReportProfile(ctx context.Context, in *MessageReportProfile, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/grpc.ServicesEmails/EmailReportProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesEmailsClient) EmailAdmin(ctx context.Context, in *EmailAdminRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/grpc.ServicesEmails/EmailAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServicesEmailsServer is the server API for ServicesEmails service.
// All implementations must embed UnimplementedServicesEmailsServer
// for forward compatibility
type ServicesEmailsServer interface {
	EmailForgottenPassword(context.Context, *Email) (*Response, error)
	EmailInterestsAdmin(context.Context, *EmailInterest) (*Response, error)
	EmailVerifyUserEmail(context.Context, *Email) (*Response, error)
	EmailUserNewCircle(context.Context, *Email) (*Response, error)
	EmailUserVerified(context.Context, *Email) (*Response, error)
	EmailReportProfile(context.Context, *MessageReportProfile) (*Response, error)
	EmailAdmin(context.Context, *EmailAdminRequest) (*Response, error)
	mustEmbedUnimplementedServicesEmailsServer()
}

// UnimplementedServicesEmailsServer must be embedded to have forward compatible implementations.
type UnimplementedServicesEmailsServer struct {
}

func (UnimplementedServicesEmailsServer) EmailForgottenPassword(context.Context, *Email) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmailForgottenPassword not implemented")
}
func (UnimplementedServicesEmailsServer) EmailInterestsAdmin(context.Context, *EmailInterest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmailInterestsAdmin not implemented")
}
func (UnimplementedServicesEmailsServer) EmailVerifyUserEmail(context.Context, *Email) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmailVerifyUserEmail not implemented")
}
func (UnimplementedServicesEmailsServer) EmailUserNewCircle(context.Context, *Email) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmailUserNewCircle not implemented")
}
func (UnimplementedServicesEmailsServer) EmailUserVerified(context.Context, *Email) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmailUserVerified not implemented")
}
func (UnimplementedServicesEmailsServer) EmailReportProfile(context.Context, *MessageReportProfile) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmailReportProfile not implemented")
}
func (UnimplementedServicesEmailsServer) EmailAdmin(context.Context, *EmailAdminRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmailAdmin not implemented")
}
func (UnimplementedServicesEmailsServer) mustEmbedUnimplementedServicesEmailsServer() {}

// UnsafeServicesEmailsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServicesEmailsServer will
// result in compilation errors.
type UnsafeServicesEmailsServer interface {
	mustEmbedUnimplementedServicesEmailsServer()
}

func RegisterServicesEmailsServer(s grpc.ServiceRegistrar, srv ServicesEmailsServer) {
	s.RegisterService(&_ServicesEmails_serviceDesc, srv)
}

func _ServicesEmails_EmailForgottenPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Email)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesEmailsServer).EmailForgottenPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.ServicesEmails/EmailForgottenPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesEmailsServer).EmailForgottenPassword(ctx, req.(*Email))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesEmails_EmailInterestsAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailInterest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesEmailsServer).EmailInterestsAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.ServicesEmails/EmailInterestsAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesEmailsServer).EmailInterestsAdmin(ctx, req.(*EmailInterest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesEmails_EmailVerifyUserEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Email)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesEmailsServer).EmailVerifyUserEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.ServicesEmails/EmailVerifyUserEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesEmailsServer).EmailVerifyUserEmail(ctx, req.(*Email))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesEmails_EmailUserNewCircle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Email)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesEmailsServer).EmailUserNewCircle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.ServicesEmails/EmailUserNewCircle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesEmailsServer).EmailUserNewCircle(ctx, req.(*Email))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesEmails_EmailUserVerified_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Email)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesEmailsServer).EmailUserVerified(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.ServicesEmails/EmailUserVerified",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesEmailsServer).EmailUserVerified(ctx, req.(*Email))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesEmails_EmailReportProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageReportProfile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesEmailsServer).EmailReportProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.ServicesEmails/EmailReportProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesEmailsServer).EmailReportProfile(ctx, req.(*MessageReportProfile))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesEmails_EmailAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesEmailsServer).EmailAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.ServicesEmails/EmailAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesEmailsServer).EmailAdmin(ctx, req.(*EmailAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ServicesEmails_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.ServicesEmails",
	HandlerType: (*ServicesEmailsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EmailForgottenPassword",
			Handler:    _ServicesEmails_EmailForgottenPassword_Handler,
		},
		{
			MethodName: "EmailInterestsAdmin",
			Handler:    _ServicesEmails_EmailInterestsAdmin_Handler,
		},
		{
			MethodName: "EmailVerifyUserEmail",
			Handler:    _ServicesEmails_EmailVerifyUserEmail_Handler,
		},
		{
			MethodName: "EmailUserNewCircle",
			Handler:    _ServicesEmails_EmailUserNewCircle_Handler,
		},
		{
			MethodName: "EmailUserVerified",
			Handler:    _ServicesEmails_EmailUserVerified_Handler,
		},
		{
			MethodName: "EmailReportProfile",
			Handler:    _ServicesEmails_EmailReportProfile_Handler,
		},
		{
			MethodName: "EmailAdmin",
			Handler:    _ServicesEmails_EmailAdmin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/notifications.proto",
}

// ServicesPushNotificationsClient is the client API for ServicesPushNotifications service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServicesPushNotificationsClient interface {
	PNChatMessage(ctx context.Context, in *PNMessageChat, opts ...grpc.CallOption) (*Response, error)
	PNUserNewCircle(ctx context.Context, in *PNMessageNewCircle, opts ...grpc.CallOption) (*Response, error)
	PNUserVerified(ctx context.Context, in *PNMessageChat, opts ...grpc.CallOption) (*Response, error)
	PNUserRejected(ctx context.Context, in *PNMessageUserRejected, opts ...grpc.CallOption) (*Response, error)
}

type servicesPushNotificationsClient struct {
	cc grpc.ClientConnInterface
}

func NewServicesPushNotificationsClient(cc grpc.ClientConnInterface) ServicesPushNotificationsClient {
	return &servicesPushNotificationsClient{cc}
}

func (c *servicesPushNotificationsClient) PNChatMessage(ctx context.Context, in *PNMessageChat, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/grpc.ServicesPushNotifications/PNChatMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesPushNotificationsClient) PNUserNewCircle(ctx context.Context, in *PNMessageNewCircle, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/grpc.ServicesPushNotifications/PNUserNewCircle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesPushNotificationsClient) PNUserVerified(ctx context.Context, in *PNMessageChat, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/grpc.ServicesPushNotifications/PNUserVerified", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesPushNotificationsClient) PNUserRejected(ctx context.Context, in *PNMessageUserRejected, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/grpc.ServicesPushNotifications/PNUserRejected", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServicesPushNotificationsServer is the server API for ServicesPushNotifications service.
// All implementations must embed UnimplementedServicesPushNotificationsServer
// for forward compatibility
type ServicesPushNotificationsServer interface {
	PNChatMessage(context.Context, *PNMessageChat) (*Response, error)
	PNUserNewCircle(context.Context, *PNMessageNewCircle) (*Response, error)
	PNUserVerified(context.Context, *PNMessageChat) (*Response, error)
	PNUserRejected(context.Context, *PNMessageUserRejected) (*Response, error)
	mustEmbedUnimplementedServicesPushNotificationsServer()
}

// UnimplementedServicesPushNotificationsServer must be embedded to have forward compatible implementations.
type UnimplementedServicesPushNotificationsServer struct {
}

func (UnimplementedServicesPushNotificationsServer) PNChatMessage(context.Context, *PNMessageChat) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PNChatMessage not implemented")
}
func (UnimplementedServicesPushNotificationsServer) PNUserNewCircle(context.Context, *PNMessageNewCircle) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PNUserNewCircle not implemented")
}
func (UnimplementedServicesPushNotificationsServer) PNUserVerified(context.Context, *PNMessageChat) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PNUserVerified not implemented")
}
func (UnimplementedServicesPushNotificationsServer) PNUserRejected(context.Context, *PNMessageUserRejected) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PNUserRejected not implemented")
}
func (UnimplementedServicesPushNotificationsServer) mustEmbedUnimplementedServicesPushNotificationsServer() {
}

// UnsafeServicesPushNotificationsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServicesPushNotificationsServer will
// result in compilation errors.
type UnsafeServicesPushNotificationsServer interface {
	mustEmbedUnimplementedServicesPushNotificationsServer()
}

func RegisterServicesPushNotificationsServer(s grpc.ServiceRegistrar, srv ServicesPushNotificationsServer) {
	s.RegisterService(&_ServicesPushNotifications_serviceDesc, srv)
}

func _ServicesPushNotifications_PNChatMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PNMessageChat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesPushNotificationsServer).PNChatMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.ServicesPushNotifications/PNChatMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesPushNotificationsServer).PNChatMessage(ctx, req.(*PNMessageChat))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesPushNotifications_PNUserNewCircle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PNMessageNewCircle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesPushNotificationsServer).PNUserNewCircle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.ServicesPushNotifications/PNUserNewCircle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesPushNotificationsServer).PNUserNewCircle(ctx, req.(*PNMessageNewCircle))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesPushNotifications_PNUserVerified_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PNMessageChat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesPushNotificationsServer).PNUserVerified(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.ServicesPushNotifications/PNUserVerified",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesPushNotificationsServer).PNUserVerified(ctx, req.(*PNMessageChat))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesPushNotifications_PNUserRejected_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PNMessageUserRejected)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesPushNotificationsServer).PNUserRejected(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.ServicesPushNotifications/PNUserRejected",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesPushNotificationsServer).PNUserRejected(ctx, req.(*PNMessageUserRejected))
	}
	return interceptor(ctx, in, info, handler)
}

var _ServicesPushNotifications_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.ServicesPushNotifications",
	HandlerType: (*ServicesPushNotificationsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PNChatMessage",
			Handler:    _ServicesPushNotifications_PNChatMessage_Handler,
		},
		{
			MethodName: "PNUserNewCircle",
			Handler:    _ServicesPushNotifications_PNUserNewCircle_Handler,
		},
		{
			MethodName: "PNUserVerified",
			Handler:    _ServicesPushNotifications_PNUserVerified_Handler,
		},
		{
			MethodName: "PNUserRejected",
			Handler:    _ServicesPushNotifications_PNUserRejected_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/notifications.proto",
}
