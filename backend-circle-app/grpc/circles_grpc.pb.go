// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ServicesEventsCirclesClient is the client API for ServicesEventsCircles service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServicesEventsCirclesClient interface {
	ReadEventsCircles(ctx context.Context, in *ReadCirclesParams, opts ...grpc.CallOption) (*ResponseEventsCircles, error)
	ReadEvents(ctx context.Context, in *ReadCirclesParams, opts ...grpc.CallOption) (*ResponseEvents, error)
	ReadEventRegisteredUsers(ctx context.Context, in *ReadCirclesParams, opts ...grpc.CallOption) (*ResponseUsers, error)
}

type servicesEventsCirclesClient struct {
	cc grpc.ClientConnInterface
}

func NewServicesEventsCirclesClient(cc grpc.ClientConnInterface) ServicesEventsCirclesClient {
	return &servicesEventsCirclesClient{cc}
}

func (c *servicesEventsCirclesClient) ReadEventsCircles(ctx context.Context, in *ReadCirclesParams, opts ...grpc.CallOption) (*ResponseEventsCircles, error) {
	out := new(ResponseEventsCircles)
	err := c.cc.Invoke(ctx, "/grpc.ServicesEventsCircles/ReadEventsCircles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesEventsCirclesClient) ReadEvents(ctx context.Context, in *ReadCirclesParams, opts ...grpc.CallOption) (*ResponseEvents, error) {
	out := new(ResponseEvents)
	err := c.cc.Invoke(ctx, "/grpc.ServicesEventsCircles/ReadEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesEventsCirclesClient) ReadEventRegisteredUsers(ctx context.Context, in *ReadCirclesParams, opts ...grpc.CallOption) (*ResponseUsers, error) {
	out := new(ResponseUsers)
	err := c.cc.Invoke(ctx, "/grpc.ServicesEventsCircles/ReadEventRegisteredUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServicesEventsCirclesServer is the server API for ServicesEventsCircles service.
// All implementations must embed UnimplementedServicesEventsCirclesServer
// for forward compatibility
type ServicesEventsCirclesServer interface {
	ReadEventsCircles(context.Context, *ReadCirclesParams) (*ResponseEventsCircles, error)
	ReadEvents(context.Context, *ReadCirclesParams) (*ResponseEvents, error)
	ReadEventRegisteredUsers(context.Context, *ReadCirclesParams) (*ResponseUsers, error)
	mustEmbedUnimplementedServicesEventsCirclesServer()
}

// UnimplementedServicesEventsCirclesServer must be embedded to have forward compatible implementations.
type UnimplementedServicesEventsCirclesServer struct {
}

func (UnimplementedServicesEventsCirclesServer) ReadEventsCircles(context.Context, *ReadCirclesParams) (*ResponseEventsCircles, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadEventsCircles not implemented")
}
func (UnimplementedServicesEventsCirclesServer) ReadEvents(context.Context, *ReadCirclesParams) (*ResponseEvents, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadEvents not implemented")
}
func (UnimplementedServicesEventsCirclesServer) ReadEventRegisteredUsers(context.Context, *ReadCirclesParams) (*ResponseUsers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadEventRegisteredUsers not implemented")
}
func (UnimplementedServicesEventsCirclesServer) mustEmbedUnimplementedServicesEventsCirclesServer() {}

// UnsafeServicesEventsCirclesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServicesEventsCirclesServer will
// result in compilation errors.
type UnsafeServicesEventsCirclesServer interface {
	mustEmbedUnimplementedServicesEventsCirclesServer()
}

func RegisterServicesEventsCirclesServer(s grpc.ServiceRegistrar, srv ServicesEventsCirclesServer) {
	s.RegisterService(&_ServicesEventsCircles_serviceDesc, srv)
}

func _ServicesEventsCircles_ReadEventsCircles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadCirclesParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesEventsCirclesServer).ReadEventsCircles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.ServicesEventsCircles/ReadEventsCircles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesEventsCirclesServer).ReadEventsCircles(ctx, req.(*ReadCirclesParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesEventsCircles_ReadEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadCirclesParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesEventsCirclesServer).ReadEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.ServicesEventsCircles/ReadEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesEventsCirclesServer).ReadEvents(ctx, req.(*ReadCirclesParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesEventsCircles_ReadEventRegisteredUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadCirclesParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesEventsCirclesServer).ReadEventRegisteredUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.ServicesEventsCircles/ReadEventRegisteredUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesEventsCirclesServer).ReadEventRegisteredUsers(ctx, req.(*ReadCirclesParams))
	}
	return interceptor(ctx, in, info, handler)
}

var _ServicesEventsCircles_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.ServicesEventsCircles",
	HandlerType: (*ServicesEventsCirclesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReadEventsCircles",
			Handler:    _ServicesEventsCircles_ReadEventsCircles_Handler,
		},
		{
			MethodName: "ReadEvents",
			Handler:    _ServicesEventsCircles_ReadEvents_Handler,
		},
		{
			MethodName: "ReadEventRegisteredUsers",
			Handler:    _ServicesEventsCircles_ReadEventRegisteredUsers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/circles.proto",
}
